import torch
import torch.nn as nn

class LSTM(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, num_layers=1):
        super(LSTM, self).__init__()
        self.lstm = nn.LSTM(input_size=input_size, 
                            hidden_size=hidden_size,
                            num_layers=num_layers,
                            batch_first=True)
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        lstm_out, _ = self.lstm(x)
        lstm_out = lstm_out[:, -1, :]  # Taking the last time step output
        output = self.fc(lstm_out)
        return output

# Example usage:
input_size = 10
output_size = 5
hidden_size = 64
num_layers = 1
sequence_length = 20
batch_size = 32

# Creating an instance of the LSTM model
lstm_model = LSTM(input_size, hidden_size, output_size, num_layers)

# Creating a sample input tensor
sample_input = torch.randn(batch_size, sequence_length, input_size)

# Forward pass
output = lstm_model(sample_input)
print("Output shape:", output.shape)

