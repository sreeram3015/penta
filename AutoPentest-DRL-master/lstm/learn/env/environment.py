Automated Penetration Testing Using DQNimport sys
import gym
import numpy as np
import gym.spaces
import torch
from io import StringIO

class LSTMEnvironment(gym.Env):
    metadata = {'render.modes': ['human', 'ansi']}
    MAP = np.loadtxt('../processdata/newmap.txt')
    line = len(MAP)
    observation_map = np.zeros((line, line), dtype=float)

    def __init__(self):
        super().__init__()
        self.lstm_input_size = 2  # Adjust according to your input size
        self.lstm_hidden_size = 64  # Adjust according to your hidden size
        self.lstm_output_size = self.line  # Adjust according to your output size

        self.lstm = torch.nn.LSTM(self.lstm_input_size, self.lstm_hidden_size, batch_first=True)
        self.fc = torch.nn.Linear(self.lstm_hidden_size, self.lstm_output_size)
        
        self.reset()

    def reset(self):
        # parameters initialize
        self.pos = 0
        self.goal = self.line - 1
        self.done = False
        self.steps = 0
        self.hidden = None  # LSTM hidden state

        return self._observe(self.pos)

    def step(self, action):
        self.next_state = action
        self.state = [self.pos, self.next_state]

        self.pos = self.next_state
        self.steps += 1

        observation = self._observe(self.next_state)
        reward = self._get_reward(self.state)

        self.done = self._is_done()
        total_steps = self.steps

        return observation, reward, self.done, total_steps

    def _get_reward(self, state):
        self.reward = self.MAP[tuple(state)]
        return self.reward

    def _observe(self, state):
        # Assume using LSTM for observation
        lstm_input = torch.tensor([[self.pos, state]], dtype=torch.float).view(1, 1, -1)

        lstm_out, self.hidden = self.lstm(lstm_input, self.hidden)
        output = self.fc(lstm_out[:, -1, :])  # Take the last time step output

        return output.view(-1)

    def _is_done(self):
        return self.pos == self.goal

    def _start_state(self):
        return self._find_pos('S')[0]

# Example usage
env = LSTMEnvironment()
observation = env.reset()
action = env.action_space.sample()
next_observation, reward, done, total_steps = env.step(action)

